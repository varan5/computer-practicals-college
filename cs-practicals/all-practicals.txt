//                                                 COMPUTER SCIENCE 1:    PRACTICALS


// Assignment: 1    Set: A    Program: 1

#include <stdlib.h>
#include<stdio.h>
#include<time.h>
void generate(int *,int );
int main()
{
    int array[20],n,i,num,flag=0;
    printf("Enter the number of elements\n");
    scanf("%d",&n);
    printf("enter the numbers\n");
    generate(array,n);
    printf("\n elements are\n");
    for(i=0;i<n;i++)
    {
        printf("\n%d",array[i]);
    }
    printf("Enter a number to be searched\n");
    scanf("%d", &num);
    for (i = 0; i < 10; i++)
    {
        if (array[i] == num)
        {
            flag = 1;
            break;
        }
    }
    if (flag == 1)
    {
        printf("Found at %d\n", i);
    }
    else
    {
        printf("Element not found\n");
    }
    return 0;
}

void generate(int *a,int n)
{
    int i;
    srand(time(0));
    for(i=0;i<n;i++)
    {
        a[i]=rand()%100;
    }
}











// Assignment: 1    Set: A    Program: 2

#include <stdio.h>
#include<stdlib.h>
#include<time.h>
void generate(int *,int );
int search(int a[],int n,int key);
int main()
{
    int array[20],n,i,num,pos;
    printf("Enter the number of elements\n");
    scanf("%d",&n);
    generate(array,n);
    printf("\n elements are\n");
    for(i=0;i<n;i++)
    {
        printf("\n%d",array[i]);
    }
    printf("Enter a number to be searched\n");
    scanf("%d", &num);
    pos=search(array,10,num);
    if(pos==-1)
    {
        printf("element not found\n");
    }else{
        printf("%d found at %d\n",num,pos);
    }
    return 0;
}

int search(int a[],int n,int key)
{
    int i=0;
    a[n]=key;
    while(a[i]!=key) i++;
    if(i==n)
        return -1;
    else
        return i;
    
}
void generate(int *a,int n)
{
    int i;
    srand(time(0));
    for(i=0;i<n;i++)
    {
        a[i]=rand()%100;
    }
}














// Assignment: 1    Set: A    Program: 3

#include<stdio.h>
int search(int a[],int n,int key);
int main()
{
    int array[20],n,i,num,pos;
    printf("Enter the number of elements\n");
    scanf("%d",&n);
    printf("enter the numbers\n");
    for(i=0;i<n;i++)
    {
        scanf("%d",&array[i]);
    }
    printf("Enter a number to be searched\n");
    scanf("%d", &num);
    pos=search(array,n,num);
    if(pos==-1)
    {
        printf("element not found\n");
    }else{
    printf("element found at position %d",pos);
    }
    return 0;
}

int search(int a[],int n,int key)
{
    int begin=0,mid;
    int end=n-1;
    while(begin<=end)
    {
        mid=(end+begin)/2;
        if(a[mid]==key)
        {
            return mid;
        }else{
            if(key<a[mid])end=mid-1;
            else begin=mid+1;
        }
    }
    if(begin>end)
        return -1;
}










// Assignment: 1     Set B:    Program: 1

#include<stdio.h>
#include<string.h>
typedef struct{
    char cityname[30];
    int stdcode;
}city;
int main()
{
    city citydetails[100];
    char cityname[30];
    FILE *fptr;
    fptr=fopen("cities.txt","r");
    if(fptr==NULL)
    {
        printf("error opening the file \n");
        return 0;
    }
    int i=0;
    printf("the details are: \n");

    while(!feof(fptr))
    {
        fscanf(fptr,"%s%d",citydetails[i].cityname,&citydetails[i].stdcode);
        printf("city name is %s and std code is %d \n",citydetails[i].cityname,citydetails[i].stdcode);
        i++;
    }
    printf("\n enter the name of city to be searched:- ");
    gets(cityname);
    printf("\n");
    int n=i,flag=0;
    for(i=0;i<n;i++)
    {
        if(strcmp(cityname,citydetails[i].cityname)==0)
        {
            flag=citydetails[i].stdcode;
            break;
        }
    }
    if(!flag==0)
    {
        printf("found and stdcode is %d\n",flag);
    }else{
    printf("not found\n");
    }
    fclose(fptr);
    return 0;
}








// Assignment: 1    Set: B    Program: 2

#include<stdio.h>
#include<string.h>
typedef struct{
    char cityname[30];
    int stdcode;
}city;
int main()
{
    city citydetails[100];
    char cityname[30];
    FILE *fptr;
    fptr=fopen("cities.txt","r+");
    if(fptr==NULL)
    {
        printf("error opening the file \n");
        return 0;
    }
    int i=0;
    printf("the details are: \n");

    while(!feof(fptr))
    {
        fscanf(fptr,"%s%d",&citydetails[i].cityname,&citydetails[i].stdcode);
        printf("city name is %s and std code is %d \n",citydetails[i].cityname,citydetails[i].stdcode);
        i++;
    }
    printf("\n enter the name of city to be searched:- ");
    int n=i;
    gets(citydetails[n].cityname);
    printf("\n");
    i=0;
    while(strcmp(citydetails[n].cityname,citydetails[i].cityname)!=0) i++;
    
    if(i==n)
    {
        printf("not found");
    }else{
        printf("found and stdcode is %d \n",citydetails[i].stdcode);
    }
    fclose(fptr);
    return 0;
}







// Assignment: 1    Set: B    Program: 3

#include<stdio.h>
#include<string.h>
typedef struct{
    char cityname[30];
    int stdcode;
}city;
int main()
{
    city citydetails[100];
    char cityname[30];
    FILE *fptr;
    fptr=fopen("sortedcitiex.txt","r");
    if(fptr==NULL)
    {
        printf("error opening the file \n");
        return 0;
    }
    int i=0;
    printf("the details are: \n");

    while(!feof(fptr))
    {
        fscanf(fptr,"%s%d",citydetails[i].cityname,&citydetails[i].stdcode);
        printf("city name is %s and std code is %d \n",citydetails[i].cityname,citydetails[i].stdcode);
        i++;
    }
    printf("\n enter the name of city to be searched:- ");
    gets(cityname);
    printf("\n");
    int n=i,flag=0;
    int low=0,mid;
    int high=n-1;
    while(low<=high)
    {
        mid=(high+low)/2;
        if(strcmp(citydetails[mid].cityname,cityname)==0)
        {
            printf("found %s",citydetails[mid].cityname);
            return 0;
        }else{
            if(strcmp(citydetails[mid].cityname,cityname)==1)high=mid-1;
            else low=mid+1;
        }
    }
    printf("not found");
    fclose(fptr);
    return 0;
}





// Assignment: 2     Set: A      Program: 1

#include<stdio.h>

void acceptArrayElements(int array[], int length) {
    printf("\nEnter elements to sort: ");
    int i;
    for (i = 0; i < length; i++)
        scanf("%d", &array[i]);
}

void bubbleSortAlgorithm(int array[], int length) {
    int i, j, temp;
    for (i = 1; i < length; i++)
        for (j = 0; j <= length- i- 1; j++)
            if (array[j] > array[j+1]) {
                temp = array[j];
                array[j] = array[j+1];
                array[j+1] = temp;
            }
}

void printArrayElements(int array[], int length) {
    int i;
    printf("\n\nSorted array elements are: ");
    for (i = 0; i < length; i++)
        printf("%d  ", array[i]);
}


int main() {
    int array[100], i, n;
    printf("How many elements in your array?");
    scanf("%d", &n);
    acceptArrayElements(array, n);
    bubbleSortAlgorithm(array, n);
    printArrayElements(array, n);
    return 0;
}






// Assignment: 2    Set: A     Program: 2

#include<stdio.h>

void acceptArrayElements(int array[], int length) {
    printf("\nEnter elements to sort: ");
    int i;
    for (i = 0; i < length; i++)
        scanf("%d", &array[i]);
}

void insertionSortAlgorithm(int array[], int length) {
    int i, j, key;
    for (i = 1; i < length; i++) {
        key = array[i];
        for (j = i -1; j >= 0; j--) {
            if(key < array[j])
                array[j+1] = array[j];
            else
                break;
        }
        array[j+1] = key;
    }
}

void printArrayElements(int array[], int length) {
    int i;
    printf("\n\nSorted array elements are: ");
    for (i = 0; i < length; i++)
        printf("%d  ", array[i]);
}


int main() {
    int array[100], i, n;
    printf("How many elements in your array?");
    scanf("%d", &n);
    acceptArrayElements(array, n);
    insertionSortAlgorithm(array, n);
    printArrayElements(array, n);
    return 0;
}








// Assignment: 2     Set: A    Program: 3


#include<stdio.h>

void acceptArrayElements(int array[], int length) {
    printf("\nEnter elements to sort: ");
    int i;
    for (i = 0; i < length; i++)
        scanf("%d", &array[i]);
}

void selectionSort(int arr[], int n) {
    int i, j, min_idx;
    for (i = 0; i < n-1; i++) {
        min_idx = i;
        for (j = i+1; j < n; j++)
          if (arr[j] < arr[min_idx])
            min_idx = j;
        swap(&arr[min_idx], &arr[i]);
    }
}

void printArrayElements(int array[], int length) {
    int i;
    printf("\n\nSorted array elements are: ");
    for (i = 0; i < length; i++)
        printf("%d  ", array[i]);
}


int main() {
    int array[100], i, n;
    printf("How many elements in your array?");
    scanf("%d", &n);
    acceptArrayElements(array, n);
    selectionSortAlgorithm(array, n);
    printArrayElements(array, n);
    return 0;
}







// Assignment: 3    Set: A    Program: 1

#include <stdio.h>
#include <time.h>
#include <stdlib.h>
void generate(int *, int,int);
void countSort(int *, int ,int);
int main()
{
    int array[20], n, i,k, num, flag = 0;
    printf("Enter the number of elements and value of k\n");
    scanf("%d %d", &n,&k);
    generate(array,k, n);
    printf("unsorted elements are\n");
    for (i = 0; i < n; i++)
    {
        printf("\n%d", array[i]);
    }
    countSort(array, k,n);
    printf("Sorted elements are:-\n");
    for (i = 0; i < n; i++)
    {
        printf("\n%d", array[i]);
    }
    return 0;
}
void generate(int *a, int k,int n)
{
    int i;
    srand(time(0));
    for (i = 0; i < n; i++)
    {
        a[i] = rand() % k;
    }
}
void countSort(int *a,int k,int n)
{
    int i,c[20]={0},b[20];
    for(i=0;i<n;i++)
        c[a[i]]+=1;
    for(i=1;i<=k;i++)
        c[i]=c[i]+c[i-1];
    for(i=n-1;i>=0;i--)
    {
        b[c[a[i]]-1]=a[i];
        c[a[i]]-=1;
    }
    for(i=0;i<n;i++)
        a[i]=b[i];

}






// Assignment: 3    Set: A    Program: 2

#include <stdio.h>
#include <time.h>
#include <stdlib.h>
void generate(int[], int);
void mergeSort(int[], int, int);
void merge(int[], int, int, int);
int main()
{
    int array[20], n, i, num, flag = 0;
    printf("Enter the number of elements\n");
    scanf("%d", &n);
    generate(array, n);
    printf("unsorted elements are\n");
    for (i = 0; i < n; i++)
    {
        printf("\n%d", array[i]);
    }
    printf("\n");
    mergeSort(array, 0, n - 1);
    printf("\nSorted elements are:-\n");
    for (i = 0; i < n; i++)
    {
        printf("\n%d", array[i]);
    }
    return 0;
}
void generate(int a[], int n)
{
    int i;
    srand(time(0));
    for (i = 0; i < n; i++)
    {
        a[i] = rand() % 100;
    }
}
void mergeSort(int a[], int low, int high)
{
    int mid;
    if (low < high)
    {
        mid = (low + high) / 2;
        mergeSort(a, low, mid);
        mergeSort(a, mid + 1, high);
        merge(a, low, mid, high);
    }
}



void merge(int a[],int low,int mid,int high)
{
    int i,j,k,b[20];
    i=low;
    j=mid+1;
    k=0;
    while((i<=mid) && (j<=high))
    {
        if(a[i]<=a[j])
            b[k++]=a[i++];
        else
            b[k++]=a[j++];
    }
    while(i<=mid)
        b[k++]=a[i++];
    while(j<=high)
        b[k++]=a[j++];
    for(i=low,k=0;i<=high;i++,k++)
        a[i]=b[k];
}






// Assignment: 3    Set: A    Program: 3

#include <stdio.h>
#include <time.h>
#include <stdlib.h>
void generate(int *, int);
void quickSort(int *, int ,int);
int partition(int *,int,int);
int main()
{
    int array[20], n, i, num, flag = 0;
    printf("Enter the number of elements\n");
    scanf("%d", &n);
    generate(array, n);
    printf("unsorted elements are\n");
    for (i = 0; i < n; i++)
    {
        printf("\n%d", array[i]);
    }
    quickSort(array, 0,n-1);
    printf("Sorted elements are:-\n");
    for (i = 0; i < n; i++)
    {
        printf("\n%d", array[i]);
    }
    return 0;
}
void generate(int *a, int n)
{
    int i;
    srand(time(0));
    for (i = 0; i < n; i++)
    {
        a[i] = rand() % 100;
    }
}
void quickSort(int *a,int lb,int ub)
{
    int j;
    if(lb<ub)
    {
        j=partition(a,lb,ub);
        quickSort(a,lb,j-1);
        quickSort(a,j+1,ub);
    }
}
int partition(int *a,int lb,int ub)
{
    int up,dn,temp,pivot;
    up=ub;
    dn=lb+1;
    pivot=a[lb];
    do{
        while((a[dn]<pivot)&& (dn<=ub))
            dn++;
        while((a[up]>pivot)&&(up>lb))
            up--;
        if(dn<up)
        {
            temp=a[dn];
            a[dn]=a[up];
            a[up]=temp;
        }
    }while(dn<up);
    a[lb]=a[up];
    a[up]=pivot;
    return up;
}






// Assignment: 3    Set: B    Program: 1

#include<stdio.h>
#include<string.h>
#include<stdlib.h>
typedef struct
{
  char name[40];
  int age;
  int salary;
} emp;
void write (emp empdetails[], int n)
{
  printf ("\n\tSorted text is written in the new file\n\n");
  int i;
  FILE *fptr;
  if ((fptr = fopen ("sortedemployee.txt", "w")) != NULL)
    {
      for (i = 0; i < n; i++)
	{
	  fprintf (fptr, "%s\t%d\t%d\n", empdetails[i].name,
		   empdetails[i].age, empdetails[i].salary);
	}
    }
}

void counting (emp empdetails[], int k, int n)
{
  int i, c[100] = { 0 }, s[100], s1[100], b[100], p[100];
  char ch[40][40], ch1[40][40];
  for (i = 0; i < n; i++)
    {
      c[empdetails[i].age] = c[empdetails[i].age] + 1;
    }
  for (i = 1; i <= k; i++)
    {
      c[i] = c[i] + c[i - 1];
    }
  for (i = n - 1; i >= 0; i--)
    {
      b[c[empdetails[i].age] - 1] = empdetails[i].age;
      s[c[empdetails[i].age] - 1] = empdetails[i].salary;
      strcpy (ch[c[empdetails[i].age] - 1], empdetails[i].name);

      c[empdetails[i].age] = c[empdetails[i].age] - 1;
    }

  for (i = 0; i < n; i++)
    {
      p[i] = empdetails[i].age;
      s1[i] = empdetails[i].salary;
      strcpy (ch1[i], empdetails[i].name);

      empdetails[i].age = b[i];
      empdetails[i].salary = s[i];
      strcpy (empdetails[i].name, ch[i]);
    }
}

int readFile (emp empdetails[])
{
  int i = 0;
  FILE *fp;
  if ((fp = fopen ("emp.txt", "r")) != NULL)
    {
      while (!feof (fp))
	{
	  fscanf (fp, "%s%d%d", empdetails[i].name, &empdetails[i].age,
		  &empdetails[i].salary);
	  i++;
	}
    }
  return i;			// number of records read
}

void merge (emp empdetails[], int low, int mid, int high)
{
  int i, j, k, b[40], s[40];
  char ch[40][40];
  i = low;
  j = mid + 1;
  k = 0;

  while ((i <= mid) && (j <= high))
    {
      if (empdetails[i].age <= empdetails[j].age)
	{
	  b[k] = empdetails[i].age;
	  s[k] = empdetails[i].salary;
	  strcpy (ch[k], empdetails[i].name);
	  k++, i++;
	}
      else
	{
	  b[k] = empdetails[j].age;
	  s[k] = empdetails[j].salary;
	  strcpy (ch[k], empdetails[j].name);
	  k++, j++;
	}
    }

  while (i <= mid)
    {
      b[k] = empdetails[i].age;
      s[k] = empdetails[i].salary;
      strcpy (ch[k], empdetails[i].name);
      k++, i++;
    }
  while (j <= high)
    {
      b[k] = empdetails[j].age;
      s[k] = empdetails[j].salary;
      strcpy (ch[k], empdetails[j].name);
      k++, j++;
    }

  for (i = low, k = 0; i <= high; i++, k++)
    {
      empdetails[i].age = b[k];
      empdetails[i].salary = s[k];
      strcpy (empdetails[i].name, ch[k]);
    }
}

void merge_sort (emp empdetails[], int low, int high)
{
  int mid;
  if (low < high)
    {
      mid = (low + high) / 2;
      merge_sort (empdetails, low, mid);
      merge_sort (empdetails, mid + 1, high);
      merge (empdetails, low, mid, high);
    }
}


int part (emp empdetails[], int lb, int ub)
{
  int up, down, temp, pivot;
  up = ub;
  down = lb + 1;
  char npivot[30];

  pivot = empdetails[lb].age;
  int spivot = empdetails[lb].salary;
  strcpy (npivot, empdetails[lb].name);

  int s;
  char ch[30];
  do
    {
      while ((empdetails[down].age < pivot) && (down <= ub))
	down++;
      while ((empdetails[up].age > pivot) && (up > lb))
	up--;

      if (down < up)
	{
	  temp = empdetails[down].age;
	  strcpy (ch, empdetails[down].name);
	  s = empdetails[down].salary;

	  empdetails[down].age = empdetails[up].age;
	  strcpy (empdetails[down].name, empdetails[up].name);
	  empdetails[down].salary = empdetails[up].salary;

	  empdetails[up].age = temp;
	  strcpy (empdetails[up].name, ch);
	  empdetails[up].salary = s;
	}
    }
  while (down < up);

  empdetails[lb].age = empdetails[up].age;
  empdetails[lb].salary = empdetails[up].salary;
  strcpy (empdetails[lb].name, empdetails[up].name);

  empdetails[up].age = pivot;
  empdetails[up].salary = spivot;
  strcpy (empdetails[up].name, npivot);
  return up;
}

void sort (emp empdetails[], int lb, int ub)
{
  int j;
  if (lb < ub)
    {
      j = part (empdetails, lb, ub);
      sort (empdetails, lb, j - 1);
      sort (empdetails, j + 1, ub);
    }
}
void display(emp empdetails[],int n)
{
    printf("the sorted list is:\n");
    for(int i=0;i<n;i++)
    {
    printf("\n%s with age %d and salary %d\n",empdetails[i].name,empdetails[i].age,empdetails[i].salary);
    }
}
int main ()
{
  emp empdetails[100];
  char name[40];
  int n;
  n = readFile (empdetails);
  int ch, k = 50;


  printf ("\n\n\t1: Counting Sort\n\t2: Merge Sort\n\t3: Quick Sort\n");
  printf ("\tEnter your choice: ");
  scanf ("%d", &ch);
  int low = 0, high = n - 1, lb = 0, ub = n - 1;

  switch (ch)
    {
    case 1:
      counting (empdetails, k, n);
      display(empdetails,n);
      write (empdetails, n);
      break;

    case 2:
      merge_sort (empdetails, low, high);
      display(empdetails,n);
      write (empdetails, n);
      break;

    case 3:
      sort (empdetails, lb, ub);
      display(empdetails,n);
      write (empdetails, n);
      break;
    }

}




 

// Assignment: 3    Set: B    Program: 2

#include<stdio.h>
#include<string.h>
#include<stdlib.h>
typedef struct
{
  char name[40];
  int age;
  int salary;
} emp;
void write (emp empdetails[], int n)
{
  printf ("\n\tSorted text is written in the new file\n\n");
  int i;
  FILE *fptr;
  if ((fptr = fopen ("sortedemployee.txt", "w")) != NULL)
    {
      for (i = 0; i < n; i++)
	{
	  fprintf (fptr, "%s\t%d\t%d\n", empdetails[i].name,
		   empdetails[i].age, empdetails[i].salary);
	}
    }
}

void counting (emp empdetails[], int n)
{
  int i, c[100] = { 0 }, s[100], s1[100], b[100], p[100];
  char ch[40][40], ch1[40][40];
  for (i = 0; i < n; i++)
    {
      int a = (empdetails[i].name[0]) - 96;
      c[a]++;
    }
  for (i = 1; i <= 26; i++)
    {
      c[i] = c[i] + c[i - 1];
    }
  for (i = n - 1; i >= 0; i--)
    {
      int a = (empdetails[i].name[0]) - 96;
      b[c[a] - 1] = empdetails[i].age;
      s[c[a] - 1] = empdetails[i].salary;
      strcpy (ch[c[a] - 1], empdetails[i].name);

      c[a] = c[a] - 1;
    }

  for (i = 0; i < n; i++)
    {
      p[i] = empdetails[i].age;
      s1[i] = empdetails[i].salary;
      strcpy (ch1[i], empdetails[i].name);

      empdetails[i].age = b[i];
      empdetails[i].salary = s[i];
      strcpy (empdetails[i].name, ch[i]);
    }
}

int readFile (emp empdetails[])
{
  int i = 0;
  FILE *fp;
  if ((fp = fopen ("emp.txt", "r")) != NULL)
    {
      while (!feof (fp))
	{
	  fscanf (fp, "%s%d%d", empdetails[i].name, &empdetails[i].age,
		  &empdetails[i].salary);
	  i++;
	}
    }
  return i;			// number of records read
}

void merge (emp empdetails[], int low, int mid, int high)
{
  int i, j, k, b[40], s[40];
  char ch[40][40];
  i = low;
  j = mid + 1;
  k = 0;

  while ((i <= mid) && (j <= high))
    {
      if (strcmp (empdetails[i].name, empdetails[j].name) <= 0)
	{
	  b[k] = empdetails[i].age;
	  s[k] = empdetails[i].salary;
	  strcpy (ch[k], empdetails[i].name);
	  k++, i++;
	}
      else
	{
	  b[k] = empdetails[j].age;
	  s[k] = empdetails[j].salary;
	  strcpy (ch[k], empdetails[j].name);
	  k++, j++;
	}
    }

  while (i <= mid)
    {
      b[k] = empdetails[i].age;
      s[k] = empdetails[i].salary;
      strcpy (ch[k], empdetails[i].name);
      k++, i++;
    }
  while (j <= high)
    {
      b[k] = empdetails[j].age;
      s[k] = empdetails[j].salary;
      strcpy (ch[k], empdetails[j].name);
      k++, j++;
    }

  for (i = low, k = 0; i <= high; i++, k++)
    {
      empdetails[i].age = b[k];
      empdetails[i].salary = s[k];
      strcpy (empdetails[i].name, ch[k]);
    }
}

void merge_sort (emp empdetails[], int low, int high)
{
  int mid;
  if (low < high)
    {
      mid = (low + high) / 2;
      merge_sort (empdetails, low, mid);
      merge_sort (empdetails, mid + 1, high);
      merge (empdetails, low, mid, high);
    }
}


int part (emp empdetails[], int lb, int ub)
{
  int up, down, temp, pivot;
  up = ub;
  down = lb + 1;
  char npivot[40];

  pivot = empdetails[lb].age;
  int spivot = empdetails[lb].salary;
  strcpy (npivot, empdetails[lb].name);

  int s;
  char ch[40];
  do
    {
      while ((strcmp (empdetails[down].name, npivot) < 0) && (down <= ub))
	down++;
      while ((strcmp (empdetails[up].name, npivot) > 0) && (up > lb))
	up--;

      if (down < up)
	{
	  temp = empdetails[down].age;
	  strcpy (ch, empdetails[down].name);
	  s = empdetails[down].salary;

	  empdetails[down].age = empdetails[up].age;
	  strcpy (empdetails[down].name, empdetails[up].name);
	  empdetails[down].salary = empdetails[up].salary;

	  empdetails[up].age = temp;
	  strcpy (empdetails[up].name, ch);
	  empdetails[up].salary = s;
	}
    }
  while (down < up);

  empdetails[lb].age = empdetails[up].age;
  empdetails[lb].salary = empdetails[up].salary;
  strcpy (empdetails[lb].name, empdetails[up].name);

  empdetails[up].age = pivot;
  empdetails[up].salary = spivot;
  strcpy (empdetails[up].name, npivot);

  return up;
}

void sort (emp empdetails[], int lb, int ub)
{
  int j;
  if (lb < ub)
    {
      j = part (empdetails, lb, ub);
      sort (empdetails, lb, j - 1);
      sort (empdetails, j + 1, ub);
    }
}

void display(emp empdetails[],int n)
{
    printf("the sorted list is:\n");
    for(int i=0;i<n;i++)
    {
    printf("\n%s with age %d and salary %d\n",empdetails[i].name,empdetails[i].age,empdetails[i].salary);
    }
}

int main ()
{
  emp empdetails[100];
  char name[40];
  int n;
  n = readFile (empdetails);
  int ch;


  printf ("\n\n\t1: Counting Sort\n\t2: Merge Sort\n\t3: Quick Sort\n");
  printf ("\tEnter your choice: ");
  scanf ("%d", &ch);
  int low = 0, high = n - 1, lb = 0, ub = n - 1;

  switch (ch)
    {
    case 1:
      counting (empdetails, n);
      display (empdetails, n);
      write (empdetails, n);
      break;

    case 2:
      merge_sort (empdetails, low, high);
      display (empdetails, n);
      write (empdetails, n);
      break;

    case 3:
      sort (empdetails, lb, ub);
      display (empdetails, n);
      write (empdetails, n);
      break;
    }

}






// Assignment: 4    Set: A    Program: 1

#include<stdio.h>
#include "singlylist.h"

int main()
{
    node * head;
    head=(node *)malloc(sizeof(node));
    head->next=NULL;
    int num,pos;
    int choice;
    do
    {
        printf("1:append\n");
        printf("2:insert\n");
        printf("3:search\n");
        printf("4:delete by number\n");
        printf("5:delete by position\n");
        printf("6:display\n");
        printf("7:exit\n");
        scanf("%d",&choice);
        switch(choice)
        {
        case 1:
            printf("enter the number\n");
            scanf("%d",&num);
            append(head,num);
            break;

        case 2:
            printf("enter the number\n");
            scanf("%d",&num);
            printf("enter the position\n");
            scanf("%d",&pos);
            insert(head,num,pos);
            break;

        case 3:
            printf("enter the number\n");
            scanf("%d",&num);
            int j=search(head,num);
            if(j==0)
                printf("number not found\n");
            else
                printf("number found at position %d",j);
            break;

        case 4:
            printf("enter the number\n");
            scanf("%d",&num);
            deletep(head,num);
            break;

        case 5:
            printf("enter the position\n");
            scanf("%d",&pos);
            deletel(head,pos);
            break;

        case 6:
            display(head);
            break;
        }
    }while(choice!=7);
}







// Assignment: 4    Set: A    Program: 2

#include<stdio.h>
#include "singlylist.h"

int main()
{
    node *head;
    head=(node *)malloc(sizeof(node));
    head->next=NULL;

    create(head);
    printf("the original list is:\n");
    display(head);
    reverse(head);
    printf("the reversed string is:\n");
    display(head);
}




// Assignment: 4    Set: B    Program: 1

#include<stdio.h>
#include "Set_B_Pgm1.h"

int main()
{
    node * head;
    head=(node *)malloc(sizeof(node));
    head->next=NULL;
    int num,pos;
    int choice;
    do
    {
        printf("1:insert\n");
        printf("2:search\n");
        printf("3:display\n");
        printf("4:exit\n");
        scanf("%d",&choice);
        switch(choice)
        {
        case 1:
            printf("enter the number\n");
            scanf("%d",&num);
            insert(head,num);
            break;

        case 2:
            printf("enter the number\n");
            scanf("%d",&num);
            printf("position is %d\n",search(head,num));
            break;

        case 3:
            display(head);
            break;
        }
    }while(choice!=4);
}






// Assignment: 4    Set: B    Program: 2

#include<stdio.h>
#include "Set_B_Pgm2.h"

int main()
{
    node *head;
    head=(node *)malloc(sizeof(node));
    head->next=NULL;

    append(head);
    printf("the original list is:\n");
    display(head);
}






// Assignment: 4    Header file: singlylist.h

#include<stdlib.h>
#include<stdio.h>

typedef struct node
{
    int info;
    struct node *next;
}node;

void append(node *head,int x)
{
    node *temp=head;
    while(temp->next!=NULL)
    {
        temp=temp->next;
    }
    node *newnode;
    newnode=(node *)malloc(sizeof(node));
    temp->next=newnode;
    newnode->info=x;
    newnode->next=NULL;
}

void insert(node *head,int x,int pos)
{
    int i;
    node *temp;
    for(temp=head,i=1;(temp!=NULL)&&(i<=pos-1);i++)
    {
        temp=temp->next;
    }
    if(temp==NULL)
            {
                printf("\nout of range\n");
                return;
            }
    node *newnode;
    newnode=(node *)malloc(sizeof(node));
    newnode->next=temp->next;
    temp->next=newnode;
    newnode->info=x;
}

int search(node *head,int x)
{
    int i;
    node *temp;
    for(temp=head->next,i=1;temp->next!=NULL;i++,temp=temp->next)
    {
        if(temp->info==x)
        return i;
    }
    return 0;
}

void deletep(node *head,int x)
{
    int i;
    node *temp,*temp1;
    for(temp=head,i=1;temp->next!=NULL;i++,temp=temp->next)
    {
        if(temp->next->info==x)
        {
           temp1=temp->next;
           temp->next=temp1->next;
           free(temp1);
           return;
        }
    }
}

void deletel(node *head,int pos)
{
    int i;
    node *temp;
    for(temp=head,i=1;(temp->next!=NULL)&&(i<=pos-1);i++)
    {
        temp=temp->next;
    }
    if(temp->next==NULL)
           {
               printf("\nout of range\n");
               return;
           }
    node *temp1=temp->next;
        temp->next=temp1->next;
        free(temp1);
}

void display(node *head)
{
    node *temp;
    printf("the elements are:\n");
    for(temp=head->next;temp!=NULL;temp=temp->next)
    {
        printf("%d\n",temp->info);
    }
}

void create(node *head)
{
    int n,count;
    node *last,*newnode;
    printf("How many nodes");
    scanf("%d",&n);
    last=head;
    for(count=1;count<=n;count++)
    {
        newnode=(node*)malloc(sizeof(node));
        newnode->next=NULL;
        printf("\n enter the node data");
        scanf("%d",&newnode->info);
        last->next=newnode;
        last=newnode;
    }
}
void reverse(node *head)
{
    node *t1=head->next,*t2,*t3;
    if(t1==NULL)
        return;
    t2=t1->next;
    if(t2==NULL)
        return;
    t3=t2->next;
    t1->next=NULL;
    while(t3!=NULL)
    {
        t2->next=t1;
        t1=t2;
        t2=t3;
        t3=t3->next;
    }
    t2->next=t1;
    head->next=t2;
}






// Assignment: 5    Set: A    Program: 1

#include<stdio.h>
#include "Set_A_Pgm1.h"

int main()
{
    node * head;
    head=(node *)malloc(sizeof(node));
    head->next=NULL;
    head->prev=NULL;
    int num,pos;
    int choice;
    do
    {
        printf("1:append\n");
        printf("2:insert\n");
        printf("3:search\n");
        printf("4:delete by number\n");
        printf("5:delete by position\n");
        printf("6:display\n");
        printf("7:exit\n");
        scanf("%d",&choice);
        switch(choice)
        {
        case 1:
            printf("enter the number\n");
            scanf("%d",&num);
            append(head,num);
            break;

        case 2:
            printf("enter the number\n");
            scanf("%d",&num);
            printf("enter the position\n");
            scanf("%d",&pos);
            insert(head,num,pos);
            break;

        case 3:
            printf("enter the number\n");
            scanf("%d",&num);
            int j=search(head,num);
            if(j==0)
                printf("number not found\n");
            else
                printf("number found at position %d\n",j);
            break;

        case 4:
            printf("enter the number\n");
            scanf("%d",&num);
            deletev(head,num);
            break;

        case 5:
            printf("enter the position\n");
            scanf("%d",&pos);
            deletep(head,pos);
            break;

        case 6:
            display(head);
            break;
        }
    }while(choice!=7);
}







// Assignment: 5    Set: A    Program: 2

#include<stdio.h>
#include "Set_A_Pgm2.h"

int main()
{
    node *head;
    head=(node *)malloc(sizeof(node));
    head->next=NULL;

    create(head);
    printf("the original list is:\n");
    display(head);
    reverse(head);
    printf("the reversed list is:\n");
    display(head);
}







// Assignment: 5    Set: B    Program: 1

#include<stdio.h>
#include "Set_B_Pgm1.h"

int main()
{
    node * head;
    head=(node *)malloc(sizeof(node));
    head->next=NULL;
    head->prev=NULL;
    int num,pos;
    int choice;
    do
    {
        printf("1:insert\n");
        printf("2:search\n");
        printf("3:display\n");
        printf("4:exit\n");
        scanf("%d",&choice);
        switch(choice)
        {
        case 1:
            printf("enter the number\n");
            scanf("%d",&num);
            insert(head,num);
            break;

        case 2:
            printf("enter the number\n");
            scanf("%d",&num);
            printf("position is %d\n",search(head,num));
            break;

        case 3:
            display(head);
            break;
        }
    }while(choice!=4);
}








// Assignment: 5    Set: B    Program: 2

#include<stdio.h>
#include "Set_B_Pgm2.h"

int main()
{
    node *head;
    head=(node *)malloc(sizeof(node));
    head->next=head;
    head->prev=head;

    append(head);
    printf("the list is:\n");
    display(head);
}





// Assignment: 6    Set: A    Program: 1

#include"singlylist.h"
#include<stdio.h>
int main()
{
    node *head1=(node*)malloc(sizeof(node));
    node *head2=(node*)malloc(sizeof(node));
    node *head3=(node*)malloc(sizeof(node));
    create(head1);
    create(head2);
    printf("merging the list\n");
    merge(head1,head2,head3);
    display(head3);
}







// Assignment: 6    Set: A     Program: 2

#include"poly.h"
#include<stdio.h>
int main()
{
    node *head1=(node*)malloc(sizeof(node));
    node *head2=(node*)malloc(sizeof(node));
    node *head3=(node*)malloc(sizeof(node));
    create(head1);
    create(head2);
    printf("Adding the list\n");
    add(head1,head2,head3);
    display(head3);
}







// Assignment: 6    Set: B    Program: 1

#include"singlylist.h"
#include<stdio.h>
int main()
{
    node *head=(node*)malloc(sizeof(node));
    create(head);
    printf("Sorting the list\n");
    sortList(head);
    display(head);
}








// Assignment: 6    Set: B    Program: 2

#include"poly.h"
#include<stdio.h>
int main()
{
    node *head1=(node*)malloc(sizeof(node));
    node *head2=(node*)malloc(sizeof(node));
    node *head3=(node*)malloc(sizeof(node));
    node *head4=(node*)malloc(sizeof(node));
    node *head5=(node*)malloc(sizeof(node));
    
    create(head1);
    create(head2);
    printf("Adding the list\n");
    multiply(head1,head2,head3,head4);
    add(head3,head4,head5);
    display(head5);
}






// Assignment: 6    Header-file: poly.h

#include <stdlib.h>
#include <stdio.h>

typedef struct node
{
    int coef, exp;
    struct node *next;
} node;
void display(node *head)
{
    node *temp;
    printf("the elements are:\n");
    for (temp = head->next; temp != NULL; temp = temp->next)
    {
        printf("%dx^%d+ ", temp->coef, temp->exp);
    }
}
void create(node *head)
{
    int n, count;
    node *last, *newnode;
    printf("How many nodes");
    scanf("%d", &n);
    last = head;
    for (count = 1; count <= n; count++)
    {
        newnode = (node *)malloc(sizeof(node));
        newnode->next = NULL;
        printf("\n enter the coef and exponent");
        scanf("%d %d", &newnode->coef, &newnode->exp);
        last->next = newnode;
        last = newnode;
    }
}
void add1(node *p1, node *p2, node *p3)
{
    node *t1 = p1->next, *t2 = p2->next, *t3 = p3, *newnode;
    int i;
    while (t1 != NULL && t2 != NULL)
    {
        newnode = (node *)malloc(sizeof(node));
        newnode->next = NULL;
        if (t1->exp > t2->exp)
        {
            newnode->exp = t1->exp;
            newnode->coef = t1->coef;
            t1 = t1->next;
        }
        else if (t1->exp < t2->exp)
        {
            newnode->exp = t2->exp;
            newnode->coef = t2->coef;
            t2 = t2->next;
        }
        else
        {
            newnode->exp = t2->exp;
            newnode->coef = t2->coef + t1->coef;
            t1 = t1->next;
            t2 = t2->next;
        }
        t3->next = newnode;
        t3 = newnode;
    }
    while (t1 != NULL)
    {
        newnode = (node *)malloc(sizeof(node));
        newnode->next = NULL;
        newnode->exp = t1->exp;
        newnode->coef = t1->coef;
        t1 = t1->next;
        t3->next = newnode;
        t3 = newnode;
    }

    while (t2 != NULL)
    {
        newnode = (node *)malloc(sizeof(node));
        newnode->next = NULL;
        newnode->exp = t2->exp;
        newnode->coef = t2->coef;
        t2 = t2->next;
        t3->next = newnode;
        t3 = newnode;
    }
}
void multiply(node *p1, node *p2, node *p3, node *p4)
{
    node *t1 = p1->next, *t2 = p2->next, *t3 = p3, *newnode;
    while (t1 != NULL)
    {
        while (t2 != NULL)
        {
            newnode = (node *)malloc(sizeof(node));
            newnode->next = NULL;
            newnode->exp = t1->exp + t2->exp;
            newnode->coef = t1->coef * t2->coef;
            t3->next=newnode;
            t2 = t2->next;
            t3 = newnode;
        }
        t3 = p4;
        t1 = t1->next;
        t2=p2->next;
    }
}

void add(node *p3, node *p4, node *p5)
{
    node *t1 = p3->next, *t2 = p4->next, *t3 = p5, *newnode;
    int i;
    while (t1 != NULL && t2 != NULL)
    {
        newnode = (node *)malloc(sizeof(node));
        newnode->next = NULL;
        if (t1->exp > t2->exp)
        {
            newnode->exp = t1->exp;
            newnode->coef = t1->coef;
            t1 = t1->next;
        }
        else if (t1->exp < t2->exp)
        {
            newnode->exp = t2->exp;
            newnode->coef = t2->coef;
            t2 = t2->next;
        }
        else
        {
            newnode->exp = t2->exp;
            newnode->coef = t2->coef + t1->coef;
            t1 = t1->next;
            t2 = t2->next;
        }
        t3->next = newnode;
        t3 = newnode;
    }
    while (t1 != NULL)
    {
        newnode = (node *)malloc(sizeof(node));
        newnode->next = NULL;
        newnode->exp = t1->exp;
        newnode->coef = t1->coef;
        t1 = t1->next;
        t3->next = newnode;
        t3 = newnode;
    }

    while (t2 != NULL)
    {
        newnode = (node *)malloc(sizeof(node));
        newnode->next = NULL;
        newnode->exp = t2->exp;
        newnode->coef = t2->coef;
        t2 = t2->next;
        t3->next = newnode;
        t3 = newnode;
    }
}







// Assignment: 6     Header-file: singlylist.h

#include<stdlib.h>
#include<stdio.h>

typedef struct node
{
    int info;
    struct node *next;
}node;
void display(node *head)
{
    node *temp;
    printf("the elements are:\n");
    for(temp=head->next;temp!=NULL;temp=temp->next)
    {
        printf("%d\n",temp->info);
    }
}
void create(node *head)
{
    int n,count;
    node *last,*newnode;
    printf("How many nodes");
    scanf("%d",&n);
    last=head;
    for(count=1;count<=n;count++)
    {
        newnode=(node*)malloc(sizeof(node));
        newnode->next=NULL;
        printf("\n enter the node data");
        scanf("%d",&newnode->info);
        last->next=newnode;
        last=newnode;
    }
} 
void merge(node *head1,node *head2,node*head3)
{
    node *t1=head1->next,*t2=head2->next,*last=head3,*newnode;
    while(t1!=NULL && t2!=NULL)
    {
        newnode=(node*)malloc(sizeof(node));
        newnode->next=NULL;
        if(t1->info <t2->info)
        {
            newnode->info=t1->info;
            t1=t1->next;
        }else{
            newnode->info=t2->info;
            t2=t2->next;
        }
        last->next=newnode;
        last=newnode;
    }
    while(t1!=NULL)
    {
        newnode=(node*)malloc(sizeof(node));
        newnode->info=t1->info;
        newnode->next=NULL;
        t1=t1->next;
        last->next=newnode;
        last=newnode;
    }
    while(t2!=NULL)
    {
        newnode=(node*)malloc(sizeof(node));
        newnode->info=t2->info;
        newnode->next=NULL;
        t2=t2->next;
        last->next=newnode;
        last=newnode;
    }
}
void sortList(node *head)
{
    node*temp,*temp1;
    int num;
    for(temp=head->next;temp->next!=NULL;temp=temp->next)
    {
        for(temp1=temp->next;temp1!=NULL;temp1=temp1->next)
        {
            if(temp->info>temp1->info)
            {
                num=temp->info;
                temp->info=temp1->info;
                temp1->info=num;
            }
        }
    }
}







// Assignment: 7    Set: A    Program: 1

#include "Set_A_Pgm1.h"
#include <stdio.h>
int main()
{
    int choice, data;
    STACK s;
    initStack(&s);
    do
    {
        printf("\n1:PUSH\n2:POP\n3:PEEK\n4:EXIT");
        scanf("\n%d", &choice);
        switch (choice)
        {
        case 1:
            if (isFull(&s))
                printf("\n Stack Overflow");
            else
            {
                printf("\n Enter the element: ");
                scanf("%d", &data);
                push(&s, data);
            }
            break;
        case 2:
            if (isEmpty(&s))
                printf("\n Stack Underflow");
            else
                printf("\n The element is: %d", pop(&s));
            break;
        case 3:
            if (isEmpty(&s))
                printf("\n Stack Underflow");
            else
                printf("\n The element is: %d", peek(&s));
            break;
        }
    } while (choice != 4);
    return 0;
}







// Assignment: 7    Set: A    Program: 2

#include "Set_A_Pgm2.h"
int main()
{
    int choice, data;
    initStack();
    do
    {
        printf("\n1:PUSH\n2:POP\n3:PEEK\n4:EXIT");
        scanf("\n%d", &choice);
        switch (choice)
        {
        case 1:
                printf("\n Enter the element: ");
                scanf("%d", &data);
                push(data);
            break;
        case 2:
            if (isEmpty(top))
                printf("\n Stack Underflow");
            else
                printf("\n The element is: %d", pop(top));
            break;
        case 3:
            if (isEmpty(top))
                printf("\n Stack Underflow");
            else
                printf("\n The element is: %d", peek(top));
            break;
        }
    } while (choice != 4);
    return 0;
}







// Assignment: 7     Set: B    Program: 1

#include<stdio.h>
#include "Set_A_Pgm1.h"
int main()
{
    int i,n,num;
    STACK s,q;
    initStack(&s);
    initStack(&q);
    printf("\n enter the number of elements");
    scanf("%d",&n);
    printf("\n enter the elements in first stack \n");
    for(i=0;i<n;i++)
    {
        printf("enter the %d element:- ",i);
        scanf("%d",&num);
        push(&s,num);
    }
    printf("\n enter the elements in second stack \n");
    for(i=0;i<n;i++)
    {
        printf("enter the %d element:- ",i);
        scanf("%d",&num);
        push(&q,num);
    }
    i=0;
    while(i!=n)
    {
        if(pop(&s)==pop(&q)) 
            i++;
        else 
            break;
    }
    if(i==n)
        printf("\n two stacks are identical");
    else
        printf("\n two stacks are not identical");
    
}






// Assignment: 7    Set: B    Program: 2

#include<stdio.h>
#include "Set_A_Pgm1.h"
int main()
{
    int i,n,num;
    STACK s,q,tmp;
    initStack(&s);
    initStack(&q);
    initStack(&tmp);
    printf("\n enter the number of elements");
    scanf("%d",&n);
    printf("\n enter the elements in first stack \n");
    for(i=0;i<n;i++)
    {
        printf("enter the %d element:- ",i);
        scanf("%d",&num);
        push(&s,num);
    }
    for(i=0;i<n;i++)
    {
        num=pop(&s);
        push(&tmp,num);
        push(&q,num);
    }
    // for(i=0;i<n;i++)
    // {
    //     num=pop(&tmp);
    //     push(&q,num);
    // }
    printf("\n elements in q stack are \n");
    for(i=0;i<n;i++)
    {
        num=pop(&q);
        printf("%d\n",num);
    }
    return 0;    
}








// Assignment: 8    Set: A    Program: 1

#include<stdio.h>
#include"cstack.h"

void reverse(char str[])
{
    int i;
    stack s;
    initStack(&s);
    for(i=0;str[i]!='\0';i++)
    {
        push(&s,str[i]);
    }
    i=0;
    while(isEmpty(&s)!=-1)
    {
        str[i]=pop(&s);
        i++;
    }
}

int main()
{
    char str[20];
    printf("enter the string to be reversed:\n");
    scanf("%s",&str);
    printf("the original string is:\n%s\n",str);
    reverse(str);
    printf("the reversed string is:\n%s\n",str);
}







// Assignment: 8    Set: A    Program: 2

#include<stdio.h>
#include "sstack.h"

int priority(char ch)
{
    switch(ch)
    {
    case '(':
        return 0;
    case '+':
    case '-':
        return 1;
    case '*':
    case '/':
    case '%':
        return 2;
    case '^':
    case '$':
        return 3;


    }
    return 0;
}

void convert(char infix[20],char post[20])
{
    int i,j=0;
    char ch,ch1;
    stack s;
    init(&s);
    for(i=0;infix[i]!='\0';i++)
    {
      ch=infix[i];
      switch(ch)
      {
      case '(':
        push(&s,ch);
        break;
      case '+':
      case '-':
      case '*':
      case '/':
      case '%':
      case '^':
      case '$':
          while((isempty(&s)!=-1)&&(priority(peek(&s))>=priority(ch)))
            post[j++]=pop(&s);
          push(&s,ch);
          break;
      case ')':
        while((ch1=pop(&s))!='(')
                post[j++]=ch1;
                break;
      default:
        post[j++]=ch;

      }
    }
    while(isempty(&s)!=-1)
        post[j++]=pop(&s);
     post[j]='\0';

}

int main()
{
    char post[20];
    char infix[20]="(a*(b+c)*((d-a)/b))";
    convert(infix,post);
    printf("the postfix string is %s\n",post);
}








// Assignment: 8    Set: B    Program: 1

#include <stdio.h>
#include<math.h>
#include "cstack.h"
#define maxsize 20

int evaluate(char postfix[], int num[])
{
    stack s;
    int value, i, opnd1, opnd2;
    initStack(&s);
    for (i = 0; postfix[i] != '\0'; i++)
    {
        switch (postfix[i])
        {
        case '+':
            opnd2 = pop(&s);
            opnd1 = pop(&s);
            push(&s, opnd1 + opnd2);
            break;

        case '-':
            opnd2 = pop(&s);
            opnd1 = pop(&s);
            push(&s, opnd1 - opnd2);
            break;

        case '*':
            opnd2 = pop(&s);
            opnd1 = pop(&s);
            push(&s, opnd1 * opnd2);
            break;

        case '/':
            opnd2 = pop(&s);
            opnd1 = pop(&s);
            push(&s, opnd1 / opnd2);
            break;

        case '%':
            opnd2 = pop(&s);
            opnd1 = pop(&s);
            push(&s, opnd1 % opnd2);
            break;

        case '^':
        case '$':
            opnd2 = pop(&s);
            opnd1 = pop(&s);
            push(&s, pow(opnd1,opnd2));
            break;

        case 'a':
            push(&s, num[0]);
            break;

        case 'b':
            push(&s, num[1]);
            break;

        case 'c':
            push(&s, num[2]);
            break;

        case 'd':
            push(&s, num[3]);
            break;
        // default:
        //     printf("enter the values of %c",postfix[i]);
        //     scanf("%d",&value);
        //     push(&s,value);
        }
    }
    return pop(&s);
}

int main()
{
    int num[4], i;
    char post[20] = "ab+cd-*ab/";
    int ans;

    printf("enter the values of a b c d\n");
    for (i = 0; i < 4; i++)
    {
        scanf("%d", &num[i]);
    }
    ans = evaluate(post, num);
    printf("the evaluated answer is %d", ans);

}






// Assignment: 8    Set: B    Program: 2

#include<stdio.h>
#include"cstack.h"

int palindrome(char str[])
{
    int i;
    stack s;
    initStack(&s);
    for(i=0;str[i]!='\0';i++)
    {
        push(&s,str[i]);
    }
    i=0;
    while(isEmpty(&s)!=-1)
    {
        if(pop(&s)!=str[i])
        return -1;
        else
            i++;
    }
    return 1;

}

int main()
{
    int j;
    char str[20];
    printf("enter a string to check whether palindrome or not:\n");
    scanf("%s",&str);
    j=palindrome(str);
    if(j==1)
        printf("the string %s is a palindrome",str);
    else
        printf("the string %s is not a palindrome",str);
}






// Assignment: 8     Header-file: cstack.h


typedef struct stack
{
    int a[30];
    int top;
}stack;


void initStack(stack *ps)
{
    ps->top=-1;
}

void push(stack *ps,int num)
{
    ps->top++;
    ps->a[ps->top]=num;
}

int pop(stack *ps)
{
    int num;
    num=ps->a[ps->top];
    ps->top--;
    return num;
}

int isEmpty(stack *ps)
{
    if(ps->top==-1)
        return -1;
        else
            return 1;

}

char peek(stack *ps)
{
    char num;
    num=ps->a[ps->top];
    return num;
}

int isFull(stack *ps)
{
    if(ps->top==20)
        return -1;
        else
            return 1;
}






// Assignment: 9     Set: A    Program: 1

#include<stdlib.h>
#include<stdio.h>
#include "Set_A_Pgm1.h"
int main()
{
    int choice, data;
    QUEUE pq;
    initQueue(&pq);
    do
    {
        printf("\n1:PUSH\n2:POP\n3:PEEK\n4:EXIT");
        scanf("\n%d", &choice);
        switch (choice)
        {
        case 1:
            if (isFull(&pq))
                printf("\n Queue Overflow");
            else
            {
                printf("\n Enter the element: ");
                scanf("%d", &data);
                addq(&pq, data);
            }
            break;
        case 2:
            if (isEmpty(&pq))
                printf("\n Queue Underflow");
            else
                printf("\n The element is: %d", removeq(&pq));
            break;
        case 3:
            if (isEmpty(&pq))
                printf("\n Queue Underflow");
            else
                printf("\n The element is: %d", peek(&pq));
            break;
        }
    } while (choice != 4);
    return 0;


}







// Assignment: 9    Set: A    Program: 2

#include<stdio.h>
#include "Set_A_Pgm2.h"
int main()
{
    int choice, data;
    NODE pq;
    initQueue();
    do
    {
        printf("\n1:PUSH\n2:POP\n3:PEEK\n4:EXIT");
        scanf("\n%d", &choice);
        switch (choice)
        {
        case 1:
                printf("\n Enter the element: ");
                scanf("%d", &data);
                addq(data);
            break;
        case 2:
            if (isEmpty(&pq))
                printf("\n Stack Underflow");
            else
                printf("\n The element is: %d", removeq(&pq));
            break;
        case 3:
            if (isEmpty(&pq))
                printf("\n Stack Underflow");
            else
                printf("\n The element is: %d", peek(&pq));
            break;
        }
    } while (choice != 4);
    return 0;


}






// Assignment: 9    Set: B    Program: 1

#include<stdio.h>
#include"Set_B_Pgm1.h"

int main()
{
    int choice,num;
    init();
    do
    {
        printf("1.add\n");
        printf("2.remove\n");
        printf("3.peek\n");
        printf("4.isempty\n");
        printf("5.exit\n");
        printf("enter you choice\n");
        scanf("%d",&choice);
        switch(choice)
        {
        case 1:
                printf("enter the number to be added\n");
                scanf("%d",&num);
                addq(num);
            break;

        case 2:
            if(isempty()==-1)
                printf("underflow\n");
            else
            {
                num=removeq();
                printf("the removed number is %d\n",num);
            }
            break;

        case 3:
           if(isempty()==-1)
                printf("underflow\n");
            else
            {
                num=peekq();
                printf("the peeked number is %d\n",num);
            }
            break;

        case 4:
            if(isempty()==-1)
                printf("the queue is empty\n");
            else
                printf("the queue is not empty\n");
            break;

        }
    }while(choice!=5);
}






// Assignment: 10     Set: A    Program: 1

#include<stdlib.h>
#include<stdio.h>
#include "Set_A_Pgm1.h"
int main()
{
    int choice, data;
    QUEUE pq;
    init(&pq);
    do
    {
        printf("\n1:ADD\n2:REMOVE\n3:PEEK\n4:EXIT");
        scanf("\n%d", &choice);
        switch (choice)
        {
        case 1:
            if (isFull(&pq))
                printf("\n Queue Overflow");
            else
            {
                printf("\n Enter the element: ");
                scanf("%d", &data);
                addq(&pq, data);
            }
            break;
        case 2:
            if (isEmpty(&pq))
                printf("\n Queue Underflow");
            else
                printf("\n The element is: %d", removeq(&pq));
            break;
        case 3:
            if (isEmpty(&pq))
                printf("\n Queue Underflow");
            else
                printf("\n The element is: %d", peek(&pq));
            break;
        }
    } while (choice != 4);
    return 0;


}






// Assignment: 10    Set: A     Program: 2

#include<stdlib.h>
#include<stdio.h>
#include "Set_A_Pgm2.h"
int main()
{
    int choice, data;
    QUEUE pq;
    init(&pq);
    do
    {
        printf("\n1:ADDL\n2:ADDR\n3:REMOVEL\n4:REMOVER\n5:EXIT");
        scanf("\n%d", &choice);
        switch (choice)
        {
        case 1:
                printf("\n Enter the element: ");
                scanf("%d", &data);
                insertLeft(&pq, data);
            break;
        case 2:
                printf("\n Enter the element: ");
                scanf("%d", &data);
                insertRight(&pq, data);
            break;
            
        case 3:
            if (isEmpty(&pq))
                printf("\n Queue Underflow");
            else
                printf("\n The element is: %d", removeLeft(&pq));
            break;
        case 4:
            if (isEmpty(&pq))
                printf("\n Queue Underflow");
            else
                printf("\n The element is: %d", removeRight(&pq));
            break;
        }
    } while (choice != 5);
    return 0;


}












  